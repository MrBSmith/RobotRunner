[gd_scene load_steps=11 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Scenes/XionCloud/XionCloudTexture.tres" type="Texture" id=2]
[ext_resource path="res://Scenes/XionCloud/XionCloud.gd" type="Script" id=3]
[ext_resource path="res://Scenes/XionCloud/Clouds.shader" type="Shader" id=7]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 648, 600 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform sampler2D noiseTexture;

uniform vec2 direction = vec2(-1.0, -1.0);

uniform float speed : hint_range(0.0, 1.0) = 0.1;
uniform float threshold : hint_range(0.0, 2.0) = 0.1;
uniform float fluffiness : hint_range(0.0, 2.0) = 0.1;
uniform float opacity : hint_range(0.0, 1.0) = 1.0;
uniform float texture_zoom : hint_range(0.0, 100.0) = 20.0;

uniform float fade_distance = 0.2;

uniform vec2 offset = vec2(0.0, 0.0);

uniform vec4 cloud_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);

// Handle the limit of the fog
vec4 clamp_cloud(vec2 uv, vec4 color, vec4 noise){
	
	if(uv.x < fade_distance || uv.x > 1.0 - fade_distance || 
	   uv.y < fade_distance || uv.y > 1.0 - fade_distance)
	{
		float dist_to_horizontal = min(uv.x, 1.0 - uv.x);
		float dist_to_vertical = min(uv.y, 1.0 - uv.y);
		float min_dist = min(dist_to_horizontal, dist_to_vertical) * 5.0;
		
		if (noise.r < threshold + (1.0 - min_dist)){
			color.a = 0.0;
		}
		//color.a = color.a * clamp(min_dist, 0.0, 1.0);
	}
	return color;
}


void fragment() {
	// Mixing two time-shifted textures to create fluffiness
	vec4 noise1 = texture(noiseTexture, mod(UV + offset + TIME * 2.5 * speed * -direction / 10.0, 0.0));
	vec4 noise2 = texture(noiseTexture, mod(UV + offset + TIME * (2.5 + fluffiness * 3.0) * speed * -direction / 10.0, 0.0));
	vec4 combinedNoise = (noise1 + noise2) / 2.0;
	
	// In case of 
	if (combinedNoise.r < threshold) {
		COLOR.a = 0.0;
	}
	else { 
		COLOR = cloud_color;
		COLOR.a = combinedNoise.r;
	}
	
	COLOR = clamp_cloud(UV, COLOR, combinedNoise);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/direction = Vector2( 1.413, 0 )
shader_param/speed = 0.1
shader_param/threshold = 0.425
shader_param/fluffiness = 0.436
shader_param/opacity = 1.0
shader_param/texture_zoom = 5.15
shader_param/fade_distance = 0.2
shader_param/offset = Vector2( 0, 0 )
shader_param/cloud_color = Color( 0.47451, 0.105882, 0.431373, 1 )
shader_param/noiseTexture = ExtResource( 2 )

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform sampler2D noiseTexture;

uniform vec2 direction = vec2(-1.0, -1.0);

uniform float speed : hint_range(0.0, 1.0) = 0.1;
uniform float threshold : hint_range(0.0, 2.0) = 0.1;
uniform float fluffiness : hint_range(0.0, 2.0) = 0.1;
uniform float opacity : hint_range(0.0, 1.0) = 1.0;

uniform float fade_distance = 0.2;

uniform vec2 offset = vec2(0.0, 0.0);

uniform vec4 cloud_color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);

// Handle the limit of the fog
vec4 clamp_cloud(vec2 uv, vec4 color, vec4 noise){
	
	if(uv.x < fade_distance || uv.x > 1.0 - fade_distance || 
	   uv.y < fade_distance || uv.y > 1.0 - fade_distance)
	{
		float dist_to_horizontal = min(uv.x, 1.0 - uv.x);
		float dist_to_vertical = min(uv.y, 1.0 - uv.y);
		float min_dist = min(dist_to_horizontal, dist_to_vertical) * 5.0;
		
		if (noise.r < threshold + (1.0 - min_dist)){
			color.a = 0.0;
		}
		//color.a = color.a * clamp(min_dist, 0.0, 1.0);
	}
	return color;
}


void fragment() {
	// Mixing two time-shifted textures to create fluffiness
	vec4 noise1 = texture(noiseTexture, mod(UV + offset + TIME * 2.5 * speed * -direction / 10.0, 0.0));
	vec4 noise2 = texture(noiseTexture, mod(UV + offset + TIME * (2.5 + fluffiness * 3.0) * speed * -direction / 10.0, 0.0));
	vec4 combinedNoise = (noise1 + noise2) / 2.0;
	
	// In case of 
	if (combinedNoise.r < threshold) {
		COLOR.a = 0.0;
	}
	else { 
		COLOR = cloud_color;
		COLOR.a = combinedNoise.r;
	}
	
	COLOR = clamp_cloud(UV, COLOR, combinedNoise);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/direction = Vector2( 1.347, 0 )
shader_param/speed = 0.126
shader_param/threshold = 0.349
shader_param/fluffiness = 0.541
shader_param/opacity = 1.0
shader_param/fade_distance = 0.231
shader_param/offset = Vector2( 0, 0 )
shader_param/cloud_color = Color( 0.160784, 0.0196078, 0.0745098, 1 )
shader_param/noiseTexture = ExtResource( 2 )

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 7 )
shader_param/direction = Vector2( 1.413, 0 )
shader_param/speed = 0.2
shader_param/threshold = 0.511
shader_param/fluffiness = 0.105
shader_param/opacity = 0.504
shader_param/fade_distance = 0.2
shader_param/offset = Vector2( 0, 0 )
shader_param/cloud_color = Color( 0.270588, 0.0313726, 0.45098, 1 )
shader_param/noiseTexture = ExtResource( 2 )

[node name="XionCloud" type="Area2D"]
collision_layer = 49
collision_mask = 16
script = ExtResource( 3 )
__meta__ = {
"_edit_group_": true,
"_edit_lock_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 1 )

[node name="Cloud3" type="Sprite" parent="."]
light_mask = 16
material = SubResource( 3 )
position = Vector2( 32.68, 0 )
scale = Vector2( 5, 5 )
z_index = 11
z_as_relative = false
texture = ExtResource( 1 )
region_rect = Rect2( 0, 0, 2000, 2000 )

[node name="Cloud2" type="Sprite" parent="."]
light_mask = -2147483632
material = SubResource( 5 )
position = Vector2( -73.94, 0 )
scale = Vector2( 5, 5 )
z_index = -1
z_as_relative = false
texture = ExtResource( 1 )
region_rect = Rect2( 0, 0, 700, 700 )

[node name="Cloud" type="Sprite" parent="."]
light_mask = 16
material = SubResource( 6 )
position = Vector2( 57.961, 0 )
scale = Vector2( 5, 5 )
z_index = 11
z_as_relative = false
texture = ExtResource( 1 )
region_rect = Rect2( 0, 0, 700, 700 )

[node name="Timer" type="Timer" parent="."]
one_shot = true
